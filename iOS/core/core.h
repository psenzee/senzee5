#ifndef _CORE_H#define _CORE_H#ifdef WIN32#define NOMINMAX 1 // this is for the horrible min/max macros in <windows.h>#endif#define USE_ALLOCATOR 0#include <string.h>#include "core_assert.h"#include "mathcore.h"#include "tuple2f.h"#include "tuple3f.h"#include "tuple4f.h"#include "matrix4f.h"#include "point.h"#include "size.h"#include "rectangle.h"#include "gametime.h"#include "FastString.h"typedef Tuple2f  Vector2;typedef Tuple3f  Vector3;typedef Tuple4f  Vector4;typedef Matrix4f Matrix;inline Vector2 v2(const Vector3 &v)                 { return Vector2(v.x, v.y);    }inline Vector3 v3(const Vector2 &v, float z = 0.0f) { return Vector3(v.x, v.y, z); }inline Vector4 v4(const Vector3 &v, float w = 0.0f) { return Vector4(v.x, v.y, v.z, w); }typedef FastString<64> String;class TriState{public:    inline TriState() : mValue(TRISTATE_UNKNOWN) {}    inline TriState(bool value) : mValue(value ? TRISTATE_TRUE : TRISTATE_FALSE) {}    inline TriState(const TriState &other) : mValue(other.mValue) {}    inline TriState &operator=(bool value)              { mValue = value ? TRISTATE_TRUE : TRISTATE_FALSE; return *this; }    inline TriState &operator=(const TriState &other)   { mValue = other.mValue; return *this; }    inline bool operator==(const TriState &other) const { return mValue == other.mValue; }    inline bool operator< (const TriState &other) const { return mValue <  other.mValue; }    inline bool operator<=(const TriState &other) const { return mValue <= other.mValue; }    inline bool operator> (const TriState &other) const { return mValue >  other.mValue; }    inline bool operator>=(const TriState &other) const { return mValue >= other.mValue; }    inline bool ToBool(bool defaultValue = false) const { return (mValue < 0) ? defaultValue : (mValue > 0); }    inline void SetUnknown()                            { mValue = TRISTATE_UNKNOWN; }    inline bool IsUnknown()                       const { return mValue == TRISTATE_UNKNOWN; }private:    enum TriStateValue { TRISTATE_UNKNOWN = -1, TRISTATE_FALSE = 0, TRISTATE_TRUE = 1 };    TriStateValue mValue;};#endif  // _CORE_H 