#include "Profiler.h"#include "core/global.h"#include <stdio.h>extern unsigned GetCurrentTimeMs();Profiler::Profiler(const char *filename, const char **elements, int flushfrequency) : file(0), total(0), frame(0), flushfrequency(flushfrequency){#ifdef _DEVELOPMENT_    const char **p = elements;    for (; *p; p++)        this->elements.push_back(*p);    if (filename)        file = fopen(filename, "wb");    if (!file)        printf("Unable to open profile log '%s' for writing!\n", filename);    WriteHeader();#endif}Profiler::~Profiler(){#ifdef _DEVELOPMENT_        if (file)        fclose(file);    file = 0;#endif    }void Profiler::SetTime(const char *name, unsigned time){#ifdef _DEVELOPMENT_        times[name] = time;#endif    }void Profiler::StartTime(const char *name){#ifdef _DEVELOPMENT_        times[name] = GetCurrentTimeMs();#endif    }void Profiler::EndTime(const char *name){#ifdef _DEVELOPMENT_        std::string n(name);    times[n] = GetCurrentTimeMs() - times[n];#endif    }void Profiler::WriteHeader(){#ifdef _DEVELOPMENT_        if (file)    {        fprintf(file, "Frame Name,Frame Total,FPS");        for (std::vector<std::string>::iterator i = elements.begin(), e = elements.end(); i != e; ++i)            fprintf(file, ",%s,%s Percent", (*i).c_str(), (*i).c_str());        fprintf(file, "\n");        fflush(file);    }#endif    }void Profiler::StartFrame(const char *name){#ifdef _DEVELOPMENT_        this->name = name ? name : "<untitled>";    for (std::map<std::string, unsigned>::iterator i = times.begin(), e = times.end(); i != e; ++i)        (*i).second = 0;    total = GetCurrentTimeMs();#endif    }void Profiler::EndFrame(){#ifdef _DEVELOPMENT_        total = GetCurrentTimeMs() - total;    if (file)    {        fprintf(file, "%s,%u,%.2f", name.c_str(), total, 1000.0 / total);        for (std::vector<std::string>::iterator i = elements.begin(), e = elements.end(); i != e; ++i)            fprintf(file, ",%u,%.2f%%", times[*i], times[*i] / (double)total * 100.0);        fprintf(file, "\n");        if (flushfrequency <= 1 || (frame % flushfrequency) == 0)            fflush(file);    }    frame++;#endif}