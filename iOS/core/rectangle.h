#ifndef _RECTANGLE_H#define _RECTANGLE_H#include "size.h"#include "point.h"namespace core{class Rectangle{public:        int x, y, width, height;    inline Rectangle() : x(0), y(0), width(0), height(0) {}            inline Rectangle(int x, int y, int w, int h) : x(x), y(y), width(w), height(h) {}    inline Rectangle(int x, int y, const core::Size &sz) : x(x), y(y), width(sz.width), height(sz.height) {}    inline Rectangle(const core::Point &p, const core::Size &sz) : x(p.x), y(p.y), width(sz.width), height(sz.height) {}        inline Rectangle(const Rectangle &r) : x(r.x), y(r.y), width(r.width), height(r.height) {}        inline Point GetMinimum() const { return Point(x, y); }    inline Point GetMaximum() const { return Point(x + width, y + height); }        inline Size  GetSize()    const { return Size(width, height); }        static Rectangle Overlap(const Rectangle &a, const Rectangle &b)    {        Point pa, pb, p, q;                pa = a.GetMinimum();        pb = b.GetMinimum();        p  = pa.Maximum(pb);                pa = a.GetMaximum();        pb = b.GetMaximum();        q  = pa.Minimum(pb);                if (p.x > q.x || p.y > q.y)            return Rectangle(0, 0, 0, 0);        return CreateFromPoints(p, q);    }            inline static Rectangle Concatenate(const Rectangle &a, const Rectangle &b)    {        return CreateFromPoints(a.GetMinimum().Minimum(b.GetMinimum()),                                a.GetMaximum().Maximum(b.GetMaximum()));    }        inline static Rectangle Concentric(const Point &p, int radius)    {        return Rectangle(p.x - radius, p.y - radius, radius * 2, radius * 2);    }        inline static Rectangle CreateFromPoints(const Point &a, const Point &b)    {        Point minp = a.Minimum(b), maxp = a.Maximum(b);        return Rectangle(minp.x, minp.y, maxp.x - minp.x, maxp.y - minp.y);            }    inline bool Inside(const Point &p) const    {        return (p.x >= x && p.x <= (x + width) && p.y >= y && p.y <= (y + height));    }};    }    #endif // _RECTANGLE_H