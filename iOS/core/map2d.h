#ifndef _MAP2D_H#define _MAP2D_H#include <string.h>// this could use a better nametemplate <typename T>class Map2d{public:    unsigned  width, height;    T        *data;    Map2d(unsigned width, unsigned height) : data(0), width(width), height(height), m_null(0)    {        data = new T [width * height];        clear();    }    ~Map2d() { delete [] data; data = 0; }    inline T        get(unsigned x, unsigned y)             const { return x < width && y < height ? data[y * width + x] : m_null; }    inline void     set(unsigned x, unsigned y, const T &u)       { if (x < width && y < height) data[y * width + x] = u; }    inline void     setrow(unsigned y, const T &u)                { if (y < height) for (unsigned i = 0; i < width;  i++) data[y * width + i] = u; }    inline void     setcolumn(unsigned x, const T &u)             { if (x < width)  for (unsigned i = 0; i < height; i++) data[x + i * width] = u; }    inline unsigned size()                                  const { return width * height; }    inline void     clear()                                       { clear(m_null); }    inline void     clear(const T &u)                             { for (unsigned i = 0, sz = width * height; i < sz; i++) data[i] = u; }    inline T       *ptr(unsigned x, unsigned y)                   { return data + y * width + x; }    inline const T *ptr(unsigned x, unsigned y)             const { return data + y * width + x; }private:    const T m_null;};#endif // _MAP2D_H