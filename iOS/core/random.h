#ifndef _RANDOM_H#define _RANDOM_Hnamespace core{    class Random{public:                enum { MAX_RANDOM = 0x7fff };                inline Random(int seed) : mState(seed) {}                inline int integer()    {        return ((mState = mState * 214013 + 2531011) >> 16) & MAX_RANDOM;    }    inline double real()    {        static const double FACTOR = 1.0 / static_cast<double>(MAX_RANDOM - 1.0);        return FACTOR * integer();    }    inline float realf()    {        static const float FACTOR = 1.0f / static_cast<float>(MAX_RANDOM - 1.f);        return FACTOR * integer();    }    inline int likelihood() // returns a number 0-15 (log2(MAX_RANDOM)) where 0 occurs about 1 in every 2 calls and 15 occurs 1 time in 32767, etc.    {        static const int MAX_RANDOM_LOG2 = intlog2(MAX_RANDOM);        return MAX_RANDOM_LOG2 - intlog2(integer());    }            private:                int mState;    inline static int intlog2(unsigned x)    {        int b = 0;        if (x >= 65536) { b += 16; x >>= 16; }        if (x >=   256) { b +=  8; x >>=  8; }        if (x >=    16) { b +=  4; x >>=  4; }        if (x >=     4) { b +=  2; x >>=  2; }        if (x >=     2) { b +=  1; x >>=  1; }        return b + x;    }};    }#endif // _RANDOM_H