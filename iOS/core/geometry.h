#ifndef _GEOMETRY_H#define _GEOMETRY_H#include <string.h>struct Buffer{    unsigned  size,              stride;    void     *data;    inline Buffer(void *data = 0, unsigned stride = 0, unsigned count = 0) : stride(stride), size(stride * count), data(data) {}    inline unsigned count() const { return size / stride; }    void copy_to(Buffer &p) const    {        p.stride = stride; p.size = size;        p.data = new unsigned char [size];        memcpy(p.data, data, size);    }    void destroy()    {        size = stride = 0;        delete [] (char *)data;        data = 0;    }};class GeometryType{   public:    enum Type { NONE, TRIANGLE_LIST, TRIANGLE_STRIP, TRIANGLE_FAN, LINE_LIST, LINE_STRIP, POINT_LIST, QUAD_LIST };private:    GeometryType();    ~GeometryType();};class Geometry{    public:    GeometryType::Type  type;    Buffer              vertices;    Buffer              indices;    inline Geometry() : type(GeometryType::NONE) {}    inline Geometry(GeometryType::Type type, const Buffer &vertices) : type(type), vertices(vertices) {}    inline Geometry(GeometryType::Type type, const Buffer &vertices, const Buffer &indices) : type(type), vertices(vertices), indices(indices) {}    inline Geometry(const Geometry &u) : type(u.type), vertices(u.vertices), indices(u.indices) {}    inline Geometry &operator=(const Geometry &u) { type = u.type; vertices = u.vertices; indices = u.indices; return *this; }    inline unsigned vertex_count() const { return vertices.count(); }    void destroy()    {        type = GeometryType::NONE;        vertices.destroy();        indices.destroy();    }    Geometry *copy() const    {        Geometry *p = new Geometry;        p->type = type;        vertices.copy_to(p->vertices);        indices.copy_to(p->indices);        return p;    }};#endif  // _GEOMETRY_H