#ifndef _MATRIX_OPERATIONS_H#define _MATRIX_OPERATIONS_H// determinants and inverses..inline double det2x2(double a, double b, double c, double d){     return a * d - b * c;}inline double det3x3(double a, double b, double c,                     double d, double e, double f,                     double g, double h, double i){    return a * (e * i - f * h) + b * (f * g - d * i) + c * (d * h - e * g);}double det4x4(double a, double b, double c, double d,              double e, double f, double g, double h,              double i, double j, double k, double l,              double m, double n, double o, double p);bool invert3x3(const double *ma, double *mb, bool transpose = false);bool invert4x4(const double *ma, double *mb, bool transpose = false);bool invert_projection4x4(const double *m, double *n);bool invert3x3(const float *ma, float *mb, bool transpose = false);bool invert4x4(const float *ma, float *mb, bool transpose = false);bool invert_projection4x4(const float *m, float *n);void floats_to_doubles(const float *mf, double *md, unsigned count);void doubles_to_floats(const double *md, float *mf, unsigned count);void scale4x4(double a, double b, double c, double d, double *m);void x_rotate4x4(double theta, double *m, bool rh = false);void y_rotate4x4(double theta, double *m, bool rh = false);void z_rotate4x4(double theta, double *m, bool rh = false);#endif  // _MATRIX_OPERATIONS_H