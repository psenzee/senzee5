#ifndef _EVENTS_H#define _EVENTS_H#ifdef __cplusplusextern "C" {#endiftypedef int (*Event_function_t)(void *context, const char *event, const char *info);typedef enum { EventFlag_Immediate = 1, EventFlag_StopOnTrue = 2 } EventFlag;    typedef struct EventHandler{    Event_function_t  function;    void             *context;    int               flags;    }  EventHandler;    // use these constants to selectively unregisterextern const char *         const EventHandler_ANY_EVENT;extern Event_function_t     const EventHandler_ANY_FUNCTION;extern const void *         const EventHandler_ANY_CONTEXT;extern const EventHandler * const EventHandler_ANY_HANDLER;    EventHandler Events_MakeHandler(Event_function_t function, void *context, int flags);void         Events_Register  (const char *dispatcher_name, const char *event, const EventHandler *handler);void         Events_Unregister(const char *dispatcher_name, const char *event, const EventHandler *handler);void         Events_Fire(const char *dispatcher_name, const char *event, const char *info /* optional */);int          Events_QueuedEventCount(const char *dispatcher_name);    // needs to be called periodically, unless the immediate flag is setvoid         Events_Update(const char *dispatcher_name);#ifdef __cplusplus}#endif#endif // _EVENTS_H