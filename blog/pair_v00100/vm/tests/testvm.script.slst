; file 'testvm.script.slst'
; total code size 948

; bytecode

; constants --
; 31 00 00 00 06 0c 00 00 00 73 74 61 6e 64 61 72
; 64 2d 6f 75 74 06 13 00 00 00 74 68 69 73 2d 69
; 73 2d 6d 79 2d 66 75 6e 63 74 69 6f 6e 04 03 00
; 00 00 41 3a 20 04 04 00 00 00 20 42 3a 20 04 04
; 00 00 00 20 43 3a 20 04 01 00 00 00 0a 06 05 00
; 00 00 77 72 69 74 65 04 06 00 00 00 4d 61 74 68
; 3a 20 00 0d 00 00 00 00 0c 00 00 00 00 2a 00 00
; 00 00 54 00 00 00 00 5b 00 00 00 00 64 00 00 00
; 00 05 00 00 00 00 00 00 00 00 05 01 00 00 00 61
; 05 01 00 00 00 62 05 01 00 00 00 63 05 01 00 00
; 00 64 05 01 00 00 00 65 05 01 00 00 00 66 05 01
; 00 00 00 67 07 16 00 ff ff 07 15 00 17 00 07 14
; 00 18 00 07 13 00 19 00 07 12 00 1a 00 07 11 00
; 1b 00 07 10 00 1c 00 02 00 00 80 3f 04 11 00 00
; 00 64 69 64 20 79 6f 75 20 67 65 74 20 74 68 61
; 74 3f 06 03 00 00 00 61 73 6b 04 0e 00 00 00 61
; 2d 6e 65 77 2d 66 69 6c 65 2e 74 78 74 04 01 00
; 00 00 61 06 0d 00 00 00 6f 70 65 6e 2d 6f 75 74
; 2d 66 69 6c 65 04 14 00 00 00 68 65 79 20 6c 69
; 74 74 6c 65 20 66 69 6c 65 20 32 21 21 0a 06 0f
; 00 00 00 6f 70 65 6e 2d 6f 75 74 2d 73 74 72 69
; 6e 67 04 04 00 00 00 68 6f 6c 61 04 01 00 00 00
; 20 04 05 00 00 00 62 6f 62 62 79 04 04 00 00 00
; 62 6f 79 21 04 09 00 00 00 79 6f 20 79 6f 20 79
; 6f 0a 05 06 00 00 00 73 74 72 65 61 6d 04 01 00
; 00 00 09 05 03 00 00 00 61 73 6b 05 06 00 00 00
; 73 74 64 6f 75 74 06 05 00 00 00 63 6c 6f 73 65
; 06 04 00 00 00 77 61 69 74

; constants (data) -- 
; 0      [ConstFunction]               'standard-out'
; 1      [ConstFunction]               'this-is-my-function'
; 2      [String]                      'A: '
; 3      [String]                      ' B: '
; 4      [String]                      ' C: '
; 5      [String]                      '
'
; 6      [ConstFunction]               'write'
; 7      [String]                      'Math: '
; 8      [PrimitiveT<int>]             '13'
; 9      [PrimitiveT<int>]             '12'
; 10     [PrimitiveT<int>]             '42'
; 11     [PrimitiveT<int>]             '84'
; 12     [PrimitiveT<int>]             '91'
; 13     [PrimitiveT<int>]             '100'
; 14     [PrimitiveT<int>]             '5'
; 15     [PrimitiveT<int>]             '0'
; 16     [Identifier]                  'a'
; 17     [Identifier]                  'b'
; 18     [Identifier]                  'c'
; 19     [Identifier]                  'd'
; 20     [Identifier]                  'e'
; 21     [Identifier]                  'f'
; 22     [Identifier]                  'g'
; 23     [Pair]                        '(g)'
; 24     [Pair]                        '(f g)'
; 25     [Pair]                        '(e f g)'
; 26     [Pair]                        '(d e f g)'
; 27     [Pair]                        '(c d e f g)'
; 28     [Pair]                        '(b c d e f g)'
; 29     [Pair]                        '(a b c d e f g)'
; 30     [PrimitiveT<float>]           '1'
; 31     [String]                      'did you get that?'
; 32     [ConstFunction]               'ask'
; 33     [String]                      'a-new-file.txt'
; 34     [String]                      'a'
; 35     [ConstFunction]               'open-out-file'
; 36     [String]                      'hey little file 2!!
'
; 37     [ConstFunction]               'open-out-string'
; 38     [String]                      'hola'
; 39     [String]                      ' '
; 40     [String]                      'bobby'
; 41     [String]                      'boy!'
; 42     [String]                      'yo yo yo
'
; 43     [Identifier]                  'stream'
; 44     [String]                      '	'
; 45     [Identifier]                  'ask'
; 46     [Identifier]                  'stdout'
; 47     [ConstFunction]               'close'
; 48     [ConstFunction]               'wait'

; code

; function 'MAIN' id=-1 localsize=64 stacksize=10
; 66 00 00 00 00 09 00 0f 00 00 00 00 05 05 00 00
; 00 05 0e 00 00 00 05 0d 00 00 00 2e 05 0c 00 00
; 00 2b 05 0b 00 00 00 05 0a 00 00 00 2d 05 09 00
; 00 00 2b 2b 05 08 00 00 00 2b 05 07 00 00 00 04
; 00 00 00 00 66 06 00 00 00 09 04 05 0f 00 00 00
; 0f 01 00 00 00 05 1d 00 00 00 0f 02 00 00 00 52
; 02 00 00 00 0f 02 00 00 00 4f 02 00 00 00 07 34
; 00 50 02 00 00 00 0f 03 00 00 00 05 1e 00 00 00
; 04 01 00 00 00 2b 0f 01 00 00 00 04 01 00 00 00
; 04 03 00 00 00 04 01 00 00 00 66 01 00 00 00 09
; 03 0c 08 c4 ff 05 05 00 00 00 04 01 00 00 00 04
; 00 00 00 00 66 06 00 00 00 09 03 05 1f 00 00 00
; 66 20 00 00 00 09 01 05 22 00 00 00 05 21 00 00
; 00 66 23 00 00 00 09 02 0f 04 00 00 00 05 24 00
; 00 00 04 04 00 00 00 66 06 00 00 00 09 02 66 25
; 00 00 00 09 00 0f 05 00 00 00 05 05 00 00 00 05
; 29 00 00 00 05 27 00 00 00 05 28 00 00 00 05 27
; 00 00 00 05 26 00 00 00 04 05 00 00 00 66 06 00
; 00 00 09 07 04 05 00 00 00 04 00 00 00 00 66 06
; 00 00 00 09 02 05 2a 00 00 00 04 00 00 00 00 66
; 06 00 00 00 09 02 05 05 00 00 00 04 00 00 00 00
; 05 2c 00 00 00 05 2e 00 00 00 05 05 00 00 00 04
; 06 00 00 00 05 2c 00 00 00 05 2d 00 00 00 05 05
; 00 00 00 04 04 00 00 00 05 2c 00 00 00 05 2b 00
; 00 00 04 00 00 00 00 66 06 00 00 00 09 0d 04 04
; 00 00 00 66 2f 00 00 00 09 01 66 30 00 00 00 09
; 00 0e

; function 'this-is-my-function' id=1 localsize=3 stacksize=64
; 14 03 00 05 05 00 00 00 04 02 00 00 00 05 04 00
; 00 00 04 01 00 00 00 05 03 00 00 00 04 00 00 00
; 00 05 02 00 00 00 66 00 00 00 00 09 00 66 06 00
; 00 00 09 08 15


;  function 'MAIN' id=-1 localsize=64 stacksize=10
0      [ 66 00 00 00 00]              FUNC   0             ; ="fn:standard-out
5      [ 09 00]                       CALL   0                    
7      [ 0f 00 00 00 00]              LET    0             
12     [ 05 05 00 00 00]              CONST  5             ; ="
"
17     [ 05 0e 00 00 00]              CONST  14            ; =5
22     [ 05 0d 00 00 00]              CONST  13            ; =100
27     [ 2e]                          FDIV   
28     [ 05 0c 00 00 00]              CONST  12            ; =91
33     [ 2b]                          FADD   
34     [ 05 0b 00 00 00]              CONST  11            ; =84
39     [ 05 0a 00 00 00]              CONST  10            ; =42
44     [ 2d]                          FMUL   
45     [ 05 09 00 00 00]              CONST  9             ; =12
50     [ 2b]                          FADD   
51     [ 2b]                          FADD   
52     [ 05 08 00 00 00]              CONST  8             ; =13
57     [ 2b]                          FADD   
58     [ 05 07 00 00 00]              CONST  7             ; ="Math: "
63     [ 04 00 00 00 00]              LOCAL  0             
68     [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
73     [ 09 04]                       CALL   4                    
75     [ 05 0f 00 00 00]              CONST  15            ; =0
80     [ 0f 01 00 00 00]              LET    1             
85     [ 05 1d 00 00 00]              CONST  29            ; =(a b c d e f g)
90     [ 0f 02 00 00 00]              LET    2             
95     [ 52 02 00 00 00]              LITER  2             
100    [ 0f 02 00 00 00]              LET    2             
105    [ 4f 02 00 00 00]              LNEXTP 2             
110    [ 07 34 00]                    JN     52            
113    [ 50 02 00 00 00]              LNEXT  2             
118    [ 0f 03 00 00 00]              LET    3             
123    [ 05 1e 00 00 00]              CONST  30            ; =1
128    [ 04 01 00 00 00]              LOCAL  1             
133    [ 2b]                          FADD   
134    [ 0f 01 00 00 00]              LET    1             
139    [ 04 01 00 00 00]              LOCAL  1             
144    [ 04 03 00 00 00]              LOCAL  3             
149    [ 04 01 00 00 00]              LOCAL  1             
154    [ 66 01 00 00 00]              FUNC   1             ; ="fn:this-is-my-function
159    [ 09 03]                       CALL   3                    
161    [ 0c]                          YIELD  
162    [ 08 c4 ff]                    JMP    -60             
165    [ 05 05 00 00 00]              CONST  5             ; ="
"
170    [ 04 01 00 00 00]              LOCAL  1             
175    [ 04 00 00 00 00]              LOCAL  0             
180    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
185    [ 09 03]                       CALL   3                    
187    [ 05 1f 00 00 00]              CONST  31            ; ="did you get that?"
192    [ 66 20 00 00 00]              FUNC   32            ; ="fn:ask
197    [ 09 01]                       CALL   1                    
199    [ 05 22 00 00 00]              CONST  34            ; ="a"
204    [ 05 21 00 00 00]              CONST  33            ; ="a-new-file.txt"
209    [ 66 23 00 00 00]              FUNC   35            ; ="fn:open-out-file
214    [ 09 02]                       CALL   2                    
216    [ 0f 04 00 00 00]              LET    4             
221    [ 05 24 00 00 00]              CONST  36            ; ="hey little file 2!!
"
226    [ 04 04 00 00 00]              LOCAL  4             
231    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
236    [ 09 02]                       CALL   2                    
238    [ 66 25 00 00 00]              FUNC   37            ; ="fn:open-out-string
243    [ 09 00]                       CALL   0                    
245    [ 0f 05 00 00 00]              LET    5             
250    [ 05 05 00 00 00]              CONST  5             ; ="
"
255    [ 05 29 00 00 00]              CONST  41            ; ="boy!"
260    [ 05 27 00 00 00]              CONST  39            ; =" "
265    [ 05 28 00 00 00]              CONST  40            ; ="bobby"
270    [ 05 27 00 00 00]              CONST  39            ; =" "
275    [ 05 26 00 00 00]              CONST  38            ; ="hola"
280    [ 04 05 00 00 00]              LOCAL  5             
285    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
290    [ 09 07]                       CALL   7                    
292    [ 04 05 00 00 00]              LOCAL  5             
297    [ 04 00 00 00 00]              LOCAL  0             
302    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
307    [ 09 02]                       CALL   2                    
309    [ 05 2a 00 00 00]              CONST  42            ; ="yo yo yo
"
314    [ 04 00 00 00 00]              LOCAL  0             
319    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
324    [ 09 02]                       CALL   2                    
326    [ 05 05 00 00 00]              CONST  5             ; ="
"
331    [ 04 00 00 00 00]              LOCAL  0             
336    [ 05 2c 00 00 00]              CONST  44            ; ="	"
341    [ 05 2e 00 00 00]              CONST  46            ; =stdout
346    [ 05 05 00 00 00]              CONST  5             ; ="
"
351    [ 04 06 00 00 00]              LOCAL  6             
356    [ 05 2c 00 00 00]              CONST  44            ; ="	"
361    [ 05 2d 00 00 00]              CONST  45            ; =ask
366    [ 05 05 00 00 00]              CONST  5             ; ="
"
371    [ 04 04 00 00 00]              LOCAL  4             
376    [ 05 2c 00 00 00]              CONST  44            ; ="	"
381    [ 05 2b 00 00 00]              CONST  43            ; =stream
386    [ 04 00 00 00 00]              LOCAL  0             
391    [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
396    [ 09 0d]                       CALL   13                   
398    [ 04 04 00 00 00]              LOCAL  4             
403    [ 66 2f 00 00 00]              FUNC   47            ; ="fn:close
408    [ 09 01]                       CALL   1                    
410    [ 66 30 00 00 00]              FUNC   48            ; ="fn:wait
415    [ 09 00]                       CALL   0                    
417    [ 0e]                          END    

;  function 'this-is-my-function' id=1 localsize=3 stacksize=64
0      [ 14 03 00]                    PROC   3             
3      [ 05 05 00 00 00]              CONST  5             ; ="
"
8      [ 04 02 00 00 00]              LOCAL  2             
13     [ 05 04 00 00 00]              CONST  4             ; =" C: "
18     [ 04 01 00 00 00]              LOCAL  1             
23     [ 05 03 00 00 00]              CONST  3             ; =" B: "
28     [ 04 00 00 00 00]              LOCAL  0             
33     [ 05 02 00 00 00]              CONST  2             ; ="A: "
38     [ 66 00 00 00 00]              FUNC   0             ; ="fn:standard-out
43     [ 09 00]                       CALL   0                    
45     [ 66 06 00 00 00]              FUNC   6             ; ="fn:write
50     [ 09 08]                       CALL   8                    
52     [ 15]                          RET    

